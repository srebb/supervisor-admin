<!doctype html>
<html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        {% include '@SrebbSupervisor/External/head_css.twig.html' %}

        <title>Adminpanel for supervisor</title>
        <style type="text/css">
            [v-cloak] {
                display: none;
            }

            .card {
                border:none;
            }

            .table {
                margin-bottom: 0;
            }

            .table tr:first-child td, .table tr:first-child th {
                border-top: 0;
            }

            .table tr:hover {
                background: #777777;
            }

            .control-badge {
                margin-left: 5px;
            }

            .control-badge:hover {
                cursor: pointer;
            }
        </style>
    </head>
    <body>
        <div class="modal fade" id="logModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <pre class="log-span"></pre>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="server_card_base" class="card col-md-12 col-lg-6 hidden" v-cloak>
            <ul class="list-group">
                <li class="list-group-item" v-bind:class="[isOnline ? 'list-group-item-success' : 'list-group-item-danger']">${serverName} <span v-if="serverVersion" class="badge badge-pill badge-primary">v ${serverVersion}</span>
                    <span class="badge badge-success badge-danger control-badge" style="float:right" v-on:click="restartAll"><span class="fas fa-redo"></span> Restart all</span>
                    <span class="badge badge-success badge-success control-badge" style="float:right" v-on:click="startAll"><span class="far fa-play-circle"></span> Start all</span>
                    <span class="badge badge-success badge-dark control-badge" style="float:right" v-on:click="stopAll"><span class="far fa-stop-circle"></span> Stop all</span>
                </li>
                <li class="list-group-item" v-cloak>
                    <table class="table">
                        <tbody>
                        <tr v-for="consumer in consumerList">
                            <th scope="row"><span class="consumer-identifier">${consumer.group}:${consumer.name}</span></th>
                            <td>
                                ${consumer.description}
                            </td>
                            <td>
                                <div v-on:click="getLog(consumer.group + ':' + consumer.name)">${consumer.out_log}</div>
                            </td>
                            <td>
                                <div v-on:click="getErrorLog(consumer.group + ':' + consumer.name)">${consumer.err_log}</div>
                            </td>
                            <td>
                                <span v-if="consumer.state == 0" class="badge badge-dark" style="float:right">${consumer.statename}</span> {#stopped#}
                                <span v-else-if="consumer.state == 10" class="badge badge-warning" style="float:right">${consumer.statename}</span> {#starting#}
                                <span v-else-if="consumer.state == 20" class="badge badge-success" style="float:right">${consumer.statename}</span> {#running#}
                                <span v-else-if="consumer.state == 30" class="badge badge-dark" style="float:right">${consumer.statename}</span> {#backoff#}
                                <span v-else-if="consumer.state == 40" class="badge badge-warning" style="float:right">${consumer.statename}</span> {#stopping#}
                                <span v-else-if="consumer.state == 100" class="badge badge-dark" style="float:right">${consumer.statename}</span> {#exited#}
                                <span v-else-if="consumer.state == 200" class="badge badge-dark" style="float:right">${consumer.statename}</span> {#fatal#}
                                <span v-else class="badge badge-primary" style="float:right">${consumer.statename} - ${consumer.state}</span>{#pls implement if you see this#}
                            </td>
                            <td style="text-align:right;">
                                <span v-if="[20].includes(consumer.state)" class="far fa-stop-circle" v-on:click="stop(consumer.group + ':' + consumer.name)"></span>
                                <span v-if="[0].includes(consumer.state)" class="far fa-play-circle" v-on:click="start(consumer.group + ':' + consumer.name)"></span>
                                <span class="fas fa-redo" v-on:click="restart(consumer.group + ':' + consumer.name)"></span>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </li>
            </ul>
        </div>

        <div class="container-fluid">
            <div class="row" id="server_card_container">
            </div>
        </div>

        {% include '@SrebbSupervisor/External/body_js.twig.html' %}

        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>

        <script type="text/javascript">
            class api {
                /**
                 * @param {String} hash
                 */
                constructor(hash) {
                    this.hash = hash;
                }

                getConsumerList() {
                    return axios.get('api/server/' + this.hash + '/consumerlist');
                }

                getSupervisorVersion() {
                    return axios.get('api/server/' + this.hash + '/supervisorversion');
                }
                stopAll() {
                    axios.post('api/server/' + this.hash + '/stopAll').then(response => {});
                }

                startAll() {
                    axios.post('api/server/' + this.hash + '/startAll').then(response => {});
                }

                restartAll() {
                    axios.post('api/server/' + this.hash + '/restartAll').then(response => {});
                }

                /**
                 * @param {String} consumerName
                 */
                stop(consumerName) {
                    axios.post('api/server/' + this.hash + '/stop/' + consumerName).then(response => {});
                }

                /**
                 * @param {String} consumerName
                 */
                start(consumerName) {
                    axios.post('api/server/' + this.hash + '/start/' + consumerName).then(response => {});
                }

                /**
                 * @param {String} consumerName
                 */
                restart(consumerName) {
                    axios.post('api/server/' + this.hash + '/restart/' + consumerName).then(response => {});
                }

                /**
                 * @param {String} consumerName
                 */
                getLog(consumerName) {
                    axios.get('api/server/' + this.hash + '/getLog/' + consumerName).then(response => {
                        console.log(response.data);
                    });
                }

                /**
                 * @param {String} consumerName
                 */
                getErrorLog(consumerName) {
                    axios.get('api/server/' + this.hash + '/getErrorLog/' + consumerName).then(response => {
                        window.loglog = response.data
                        console.log(response.data[0].split('}{'));

                        console.log(response.data[0].split('}{'));
                    });
                }

                /**
                 * @param {String} consumerName
                 */
                getFormattedErrorLog(consumerName) {
                    return new Promise((resolve, reject) => {
                        axios.get('api/server/' + this.hash + '/getErrorLog/' + consumerName).then(response => {
                            if (typeof response.data[0] !== 'string') {
                                reject('response does not contain expected data')
                            }

                            /**
                             * @type string
                             */
                            let log = response.data[0];

                            // log = log.replace(/","/g, '", "');
                            // log = log.replace(/":"/g, '": "');

                            const parts = log.split('\n');

                            console.log(parts);
                            console.log(parts.length);

                            let formatted = '';

                            parts.forEach(part => {
                                let beautified = null;
                                try {
                                    const decoded = JSON.parse(part);
                                    beautified = JSON.stringify(decoded, null, 4);

                                    console.log(beautified);
                                } catch (e) {
                                }

                                if (beautified === null) {
                                    formatted += part + '\n'

                                    return
                                }

                                formatted += beautified + '\n'

                            })

                            resolve(formatted)
                        }).catch(e => {
                            reject(e)
                        });
                    })
                }
            }

            /**
             * @param {string} hash
             */
            function createNewHtml(hash) {
                const $base = $('#server_card_base');
                const $container = $('#server_card_container');

                if ($base.length === 0) {
                    throw new Error('can not find base template for server');
                }

                if ($container.length === 0) {
                    throw new Error('can not find base server container');
                }

                let $clone = $base .clone();

                $clone.attr('id', 'server_card_' + hash);

                $clone.removeClass('tmp hidden').appendTo('#server_card_container');
            }

            /**
             * @param {Object} server
             * @param {String} server.name
             * @param {String} server.hash
             *
             * @return {Vue}
             */
            function createVueServer(server) {
                createNewHtml(server.hash);

                return new Vue({
                    delimiters: ['${', '}'],
                    el: '#server_card_' + server.hash,
                    data: {
                        serverName: server.name,
                        nameHash: server.hash,
                        consumerList: [],
                        serverVersion: null,
                        isOnline: false,
                        api: null
                    },
                    methods: {
                        setup() {
                            this.api = new api(this.nameHash);
                            this.getSupervisorVersion();
                        },
                        getConsumerList() {
                            this.api.getConsumerList()
                                .then(response => {
                                    this.consumerList = response.data;
                                    this.isOnline = true;
                                    setTimeout(this.getConsumerList, 1000);
                                })
                                .catch(e => {
                                    this.isOnline = false;
                                    setTimeout(this.getSupervisorVersion, 1000);
                                });
                        },
                        getSupervisorVersion() {
                            this.api.getSupervisorVersion()
                                .then(response => {
                                    this.serverVersion = response.data;
                                    this.getConsumerList();
                                })
                                .catch(e => {
                                    setTimeout(this.getSupervisorVersion, 3000);
                                });
                        },
                        stopAll() {
                            this.api.stopAll();
                        },
                        startAll() {
                            this.api.startAll();
                        },
                        restartAll() {
                            this.api.restartAll();
                        },
                        stop(consumerName) {
                            this.api.stop(consumerName);
                        },
                        start(consumerName) {
                            this.api.start(consumerName);
                        },
                        restart(consumerName) {
                            this.api.restart(consumerName);
                        },
                        getLog(consumerName) {
                            this.api.getLog(consumerName);
                        },
                        getErrorLog(consumerName) {
                            this.api.getFormattedErrorLog(consumerName).then(log => {
                                $('#logModal .log-span').text(log)
                                $('#logModal').modal()
                            })
                        },
                    }
                })
            }

            let allServer = [];

{% for server in serverStack %}
            allServer.push({
                name: '{{ server.getServerName() }}',
                hash: '{{ server.getNameHash }}',
            });
{% endfor %}

            allServer.forEach(function(server) {
                let vueServer = createVueServer(server);
                vueServer.setup();
                window['server_card_' + server.name] = vueServer;
            })
        </script>
    </body>
</html>
